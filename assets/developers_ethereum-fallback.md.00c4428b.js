import{_ as a,o as e,c as s,Q as t}from"./chunks/framework.51d6c45b.js";const n="/img/Celestia_ethereum-fallback.jpg",f=JSON.parse('{"title":"Ethereum fallback","description":"The DA fallback mechanism to Ethereum for rollups.","frontmatter":{"description":"The DA fallback mechanism to Ethereum for rollups.","head":[["meta",{"name":"og:title","content":"Ethereum fallback | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/ethereum-fallback.md","filePath":"developers/ethereum-fallback.md","lastUpdated":1702650194000}'),o={name:"developers/ethereum-fallback.md"},l=t('<h1 id="ethereum-fallback" tabindex="-1">Ethereum fallback <a class="header-anchor" href="#ethereum-fallback" aria-label="Permalink to &quot;Ethereum fallback&quot;">​</a></h1><p>Ethereum fallback is <a href="https://github.com/celestiaorg/optimism/pull/266" target="_blank" rel="noreferrer">a fallback mechanism</a> that enables Ethereum L2s (or L3s) to “fall back” to using Ethereum calldata for data availability in the event of downtime on Celestia Mainnet Beta. This feature is currently supported by Celestia integrations with:</p><ul><li><a href="./optimism-devnet#eth-fallback">OP Stack</a></li><li>Arbitrum Nitro</li></ul><p>In the case of Celestia downtime or temporary unavailability, L2s can fallback to posting transactions as calldata on Ethereum or another DA layer for data availability instead of posting to Celestia. This mechanism ensures users can continue to transact securely and seamlessly, preventing disruptions and helping to ensure user funds do not get stuck in the L2&#39;s bridge on Ethereum.</p><p>Ethereum fallback is triggered whenever the sequencer has an error sending the <code>PayForBlobs</code> transaction on Celestia. Fallback can be triggered due to a congested mempool or nonce error and can be simulated with an error such as low balance or incorrect sequence. Fallback can also be triggered in the event Blobstream stops relaying attestations.</p><p><img src="'+n+`" alt="Ethereum fallback"></p><h2 id="op-stack" tabindex="-1">OP Stack <a class="header-anchor" href="#op-stack" aria-label="Permalink to &quot;OP Stack&quot;">​</a></h2><p>The Ethereum fallback mechanism is implemented in the <a href="https://github.com/celestiaorg/optimism/tree/release-v1.0.0" target="_blank" rel="noreferrer">celestiaorg/optimism</a> v1.0.0 release.</p><p>The <code>op-batcher/batcher/driver.go</code> and <code>op-node/rollup/derive/calldata_source.go</code> files are part of the Ethereum fallback mechanism in the <code>op-batcher</code> and <code>op-node</code> respectively.</p><p>In <a href="https://github.com/celestiaorg/optimism/blob/release-v1.0.0/op-batcher/batcher/driver.go#L400-L406" target="_blank" rel="noreferrer"><code>driver.go</code>, the <code>sendTransaction</code> function is responsible for the write path</a> of the Ethereum fallback. This function creates and submits a transaction to the batch inbox address with the given data. It uses the underlying <code>txmgr</code> to handle transaction sending and gas price management.</p><p>If the transaction data can be published as a blob to Celestia, it replaces the calldata with a blob identifier and sends the transaction with this data. If it cannot be published to Celestia, it falls back to Ethereum without any change to the transaction.</p><p>The blob identifier starts with the special prefix <code>0xce</code>, which was chosen a mnemonic for Celestia, and indicates that the remaining data has to interpreted as a little-endian encoded Block Height (8 bytes) and Blob Commitment (32 bytes). The combination of these can later be used to retrieve the original calldata from Celestia.</p><table><thead><tr><th>Prefix</th><th>8 bytes</th><th>32 bytes</th></tr></thead><tbody><tr><td>0xce</td><td>Block Height</td><td>Blob Commitment</td></tr></tbody></table><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> (l </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">BatchSubmitter) </span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    txdata txData,</span></span>
<span class="line"><span style="color:#E1E4E8;">    queue </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">txmgr.Queue[txData],</span></span>
<span class="line"><span style="color:#E1E4E8;">    receiptsCh </span><span style="color:#F97583;">chan</span><span style="color:#E1E4E8;"> txmgr.TxReceipt[txData],</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> (l </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">BatchSubmitter) </span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    txdata txData,</span></span>
<span class="line"><span style="color:#24292E;">    queue </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">txmgr.Queue[txData],</span></span>
<span class="line"><span style="color:#24292E;">    receiptsCh </span><span style="color:#D73A49;">chan</span><span style="color:#24292E;"> txmgr.TxReceipt[txData],</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>In <code>calldata_source.go</code>, <a href="https://github.com/celestiaorg/optimism/blob/release-v1.0.0/op-node/rollup/derive/calldata_source.go#L138-L163" target="_blank" rel="noreferrer">the <code>DataFromEVMTransactions</code> function defines the read path</a> of the Ethereum fallback. This function filters all of the transactions and returns the calldata from transactions that are sent to the batch inbox address from the batch sender address.</p><p>If the calldata matches the version prefix <code>0xce</code>, it is decoded as a blob identifier, the original calldata is retrieved from Celestia and returned for derivation. If the calldata does not match the prefix, the entire calldata is returned for derivation.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataFromEVMTransactions</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    config </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rollup.Config,</span></span>
<span class="line"><span style="color:#E1E4E8;">    batcherAddr common.Address,</span></span>
<span class="line"><span style="color:#E1E4E8;">    txs types.Transactions,</span></span>
<span class="line"><span style="color:#E1E4E8;">    log log.Logger</span></span>
<span class="line"><span style="color:#E1E4E8;">) ([]eth.Data, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataFromEVMTransactions</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    config </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rollup.Config,</span></span>
<span class="line"><span style="color:#24292E;">    batcherAddr common.Address,</span></span>
<span class="line"><span style="color:#24292E;">    txs types.Transactions,</span></span>
<span class="line"><span style="color:#24292E;">    log log.Logger</span></span>
<span class="line"><span style="color:#24292E;">) ([]eth.Data, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>These two functions work together to ensure that the Ethereum fallback mechanism operates correctly, allowing the rollup to continue functioning even during periods of downtime on Celestia.</p><h2 id="arbitrum" tabindex="-1">Arbitrum <a class="header-anchor" href="#arbitrum" aria-label="Permalink to &quot;Arbitrum&quot;">​</a></h2><p>In <a href="https://github.com/OffchainLabs/nitro" target="_blank" rel="noreferrer">Arbitrum Nitro</a>, the <a href="https://github.com/OffchainLabs/nitro/blob/master/arbnode/batch_poster.go#L989-L1001" target="_blank" rel="noreferrer">Ethereum fallback mechanism in the <code>BatchPoster</code> function</a> is handling the process of storing data, with a fallback mechanism to store data onchain if the primary data availability storage fails.</p><p>The <a href="https://github.com/celestiaorg/nitro" target="_blank" rel="noreferrer">@celestiaorg/nitro</a> integration <a href="https://github.com/celestiaorg/nitro/blob/f01968eb3d4e19329e9c92b050e98a8e5772f1f2/arbnode/batch_poster.go#L845-L857" target="_blank" rel="noreferrer">uses the same fallback mechanism</a>.</p>`,21),r=[l];function c(i,p,h,d,m,b){return e(),s("div",null,r)}const E=a(o,[["render",c]]);export{f as __pageData,E as default};
